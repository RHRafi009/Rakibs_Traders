package UI.BigPopUp;

import Database.DBConnectionProvider;
import UI.PopUp.NoConnection;
import com.placeholder.PlaceHolder;
import graph.CostReportGraph;
import java.awt.List;
import java.awt.event.WindowEvent;
import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Objects;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.stage.Stage;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import rakibs.traders.RakibsTraders;

public class CostReport extends javax.swing.JFrame {
    PlaceHolder place;
    
    public CostReport() {
        initComponents();
        initTable();
        setIcon();
//        place = new PlaceHolder(jTextFieldSearchProduct,"Search Product");
          place = new PlaceHolder(jTextFieldSearchProduct,"Search Product");
        if(!(jCheckBox1.isSelected())){
            jTextFieldSearchProduct.setEnabled(false);
            jButtonGO1.setEnabled(false);
        }
        
        if( !(jCheckBox2.isSelected()) ){
            jDateChooser2.setEnabled(false);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrPaneTable = new javax.swing.JScrollPane();
        lblExpenseHistory = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        jLabel8 = new javax.swing.JLabel();
        jCheckBox2 = new javax.swing.JCheckBox();
        jDateChooser2 = new com.toedter.calendar.JDateChooser();
        jButtonGO = new javax.swing.JButton();
        jTextFieldSearchProduct = new javax.swing.JTextField();
        jCheckBox1 = new javax.swing.JCheckBox();
        jButtonGO1 = new javax.swing.JButton();
        jButtonRefresh = new javax.swing.JButton();
        jButtonViewStock2 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        lblBackground = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        getContentPane().add(scrPaneTable, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 160, 990, 280));

        lblExpenseHistory.setFont(new java.awt.Font("Titillium", 0, 22)); // NOI18N
        lblExpenseHistory.setForeground(new java.awt.Color(67, 196, 114));
        lblExpenseHistory.setText("Cost Report");
        getContentPane().add(lblExpenseHistory, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 20, 304, 43));

        jLabel2.setBackground(new java.awt.Color(204, 204, 204));
        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(204, 204, 204));
        jLabel2.setText("Reports by:");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 110, 150, 30));

        jLabel4.setBackground(new java.awt.Color(204, 204, 204));
        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(204, 204, 204));
        jLabel4.setText("Total Cost Gained:");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 500, 130, 40));

        jLabel3.setBackground(new java.awt.Color(204, 204, 204));
        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(204, 204, 204));
        jLabel3.setText("Time Selected: ");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 460, 120, 40));

        jLabel7.setBackground(new java.awt.Color(204, 204, 204));
        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(204, 204, 204));
        jLabel7.setText("#Days");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 460, 100, 40));

        jLabel10.setBackground(new java.awt.Color(204, 204, 204));
        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(204, 204, 204));
        jLabel10.setText("Item found :");
        getContentPane().add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 460, 90, 40));

        jLabel9.setBackground(new java.awt.Color(204, 204, 204));
        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(204, 204, 204));
        jLabel9.setText("#Item");
        getContentPane().add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 460, 120, 40));

        jLabel12.setBackground(new java.awt.Color(204, 204, 204));
        jLabel12.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(204, 204, 204));
        jLabel12.setText("#Total Cost");
        getContentPane().add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 500, 160, 40));
        getContentPane().add(jDateChooser1, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 110, 200, 30));

        jLabel8.setBackground(new java.awt.Color(204, 204, 204));
        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(204, 204, 204));
        jLabel8.setText("FROM:");
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 80, 50, 30));

        jCheckBox2.setForeground(new java.awt.Color(255, 255, 255));
        jCheckBox2.setText(" TO");
        jCheckBox2.setContentAreaFilled(false);
        jCheckBox2.setFocusable(false);
        jCheckBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox2ActionPerformed(evt);
            }
        });
        getContentPane().add(jCheckBox2, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 80, 80, 30));
        getContentPane().add(jDateChooser2, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 110, 220, 30));

        jButtonGO.setBackground(new java.awt.Color(0, 0, 153));
        jButtonGO.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jButtonGO.setForeground(new java.awt.Color(255, 255, 255));
        jButtonGO.setText("GO");
        jButtonGO.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGOActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonGO, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 110, 60, 30));

        jTextFieldSearchProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldSearchProductActionPerformed(evt);
            }
        });
        getContentPane().add(jTextFieldSearchProduct, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 110, 180, 30));

        jCheckBox1.setBackground(new java.awt.Color(0, 0, 0));
        jCheckBox1.setForeground(new java.awt.Color(255, 255, 255));
        jCheckBox1.setText("Active Product");
        jCheckBox1.setContentAreaFilled(false);
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });
        getContentPane().add(jCheckBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 80, 160, -1));

        jButtonGO1.setBackground(new java.awt.Color(0, 0, 153));
        jButtonGO1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jButtonGO1.setForeground(new java.awt.Color(255, 255, 255));
        jButtonGO1.setText("GO");
        jButtonGO1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGO1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonGO1, new org.netbeans.lib.awtextra.AbsoluteConstraints(970, 110, 60, 30));

        jButtonRefresh.setBackground(new java.awt.Color(0, 0, 153));
        jButtonRefresh.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButtonRefresh.setForeground(new java.awt.Color(255, 255, 255));
        jButtonRefresh.setText("REFRESH");
        jButtonRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRefreshActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonRefresh, new org.netbeans.lib.awtextra.AbsoluteConstraints(930, 20, 110, 30));

        jButtonViewStock2.setBackground(new java.awt.Color(0, 51, 153));
        jButtonViewStock2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButtonViewStock2.setForeground(new java.awt.Color(255, 255, 255));
        jButtonViewStock2.setText("STOCK");
        jButtonViewStock2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonViewStock2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonViewStock2, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 20, 120, 30));

        jButton2.setBackground(new java.awt.Color(220, 70, 9));
        jButton2.setForeground(new java.awt.Color(254, 254, 254));
        jButton2.setText("COST GRAPH");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 460, 150, 30));

        lblBackground.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/Icons/background.png"))); // NOI18N
        getContentPane().add(lblBackground, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -360, 2540, 1380));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jCheckBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox2ActionPerformed
        // TODO add your handling code here:
        if( !(jCheckBox2.isSelected()) ){
            jDateChooser2.setEnabled(false);
        }
        else{
            jDateChooser2.setEnabled(true);
        }
    }//GEN-LAST:event_jCheckBox2ActionPerformed
    
    public ArrayList<String> dates = new ArrayList<String>();
    public ArrayList<Double> values = new ArrayList<Double>();

    
    private void jButtonGOActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGOActionPerformed
        // TODO add your handling code here:
        data.getDataVector().removeAllElements();
        table.setModel(data);
        scrPaneTable.getViewport().add(table);

        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        String startingDate = dateFormat.format(jDateChooser1.getDate());

        if( !startingDate.equals("") && !( jCheckBox2.isSelected()) ){ // just working with starting date;

            Connection con = DBConnectionProvider.getDBConnection();
            String query = "SELECT date,sum(total) as sumBills FROM bill_list where date = ? order by billing_ID asc";
            String query2 = "SELECT date, sum(amount) as sumExpense from expenses where date = ?";
            //String query3 = "select sum(returned_list.original_total-returned_list.total_cashBack) as sum from returned_list  where date = ? GROUP by returned_list.date";

            int rownum = 0;

            try{
                PreparedStatement pstmt1 = con.prepareStatement(query);
                pstmt1.setString(1,startingDate); 
                ResultSet rs = pstmt1.executeQuery();
                BigDecimal totalValueOfSearch = BigDecimal.ZERO;
                dates.clear(); values.clear();
               
                if(rs.next()){
                    do{
                        rownum++;
                        String col1 = rs.getString("date");
                        Double col2 = rs.getDouble("sumBills");
                        dates.add(col1);
                        values.add(col2);
                       
                        PreparedStatement pstmt2 = con.prepareStatement(query2);
                        pstmt2.setString(1,startingDate); 
                        ResultSet rs2 = pstmt2.executeQuery();
                        Double col3 = 0.0;
                        
                        while( rs2.next() ){
                            col3 = rs2.getDouble("sumExpense");
                        }
                        rs2.close();
                        
                        totalValueOfSearch = totalValueOfSearch.add(new BigDecimal(col3));
                        totalValueOfSearch = totalValueOfSearch.add(new BigDecimal(col2));
                        data.addRow(new Object[]{col1,String.format("%.4f",col2), String.format("%.4f",col3), String.format("%.4f",(col2+col3)) });

                    }while(rs.next());
                    table.setModel(data);
                    rs.close();
                    
                    jLabel9.setText(rownum + "");
                    jLabel12.setText(String.format("%.4f",totalValueOfSearch));

                }

            }catch(Exception ex){
                System.out.println("No database connection"+ex);
                NoConnection no = new NoConnection();
                RakibsTraders.popUp(no);
            }
        }
        else{
            
          String endingDate = dateFormat.format(jDateChooser2.getDate());  
          Connection con = DBConnectionProvider.getDBConnection();  
          String query = "SELECT date,sum(total) as sumBills FROM bill_list where date between ? and ? GROUP by date order by date asc";
          String query2 = "SELECT date, sum(amount) as sumExpense from expenses where date between ? and ? GROUP by date order by date asc ";
          int rownum = 0;

            try{
                PreparedStatement pstmt1 = con.prepareStatement(query);
                pstmt1.setString(1,startingDate); 
                pstmt1.setString(2,endingDate); 
                ResultSet rs = pstmt1.executeQuery();
                BigDecimal totalValueOfSearch = BigDecimal.ZERO;
                dates.clear(); values.clear();
               
                if(rs.next()){
                    do{
                        rownum++;
                        String col1 = rs.getString("date");
                        Double col2 = rs.getDouble("sumBills");
                        dates.add(col1);
                       
                        PreparedStatement pstmt2 = con.prepareStatement(query2);
                        pstmt2.setString(1,startingDate);
                        pstmt2.setString(2, endingDate); 
                        ResultSet rs2 = pstmt2.executeQuery();
                        Double col3 = 0.0;
                        while( rs2.next() ){
                            col3 = rs2.getDouble("sumExpense");
                        }
                        rs2.close();
                        values.add(col2+col3);
                        totalValueOfSearch = totalValueOfSearch.add(new BigDecimal(col3));
                        totalValueOfSearch = totalValueOfSearch.add(new BigDecimal(col2));
                        data.addRow(new Object[]{col1,String.format("%.4f",col2), String.format("%.4f",col3), String.format("%.4f",(col2+col3)) });

                    }while(rs.next());
                    table.setModel(data);
                    rs.close();
                    
                    String query3 = "SELECT date, sum(amount) as sumEXP from expenses where date not in (select date from bill_list) GROUP by date" ;
                    PreparedStatement pstmt3 = con.prepareStatement(query3);
                    ResultSet rs3 = pstmt3.executeQuery();
                    String col1 = "";
                    Double col3 = 0.0;
//                    totalValueOfSearch = BigDecimal.ZERO;
    //                    values.clear();dates.clear();

                    while( rs3.next() ){
                        rownum++;
                        col1 = rs3.getString("date");
                        col3 = rs3.getDouble("sumEXP");
                        dates.add(col1);
                        totalValueOfSearch = totalValueOfSearch.add(new BigDecimal(col3));
                        values.add(Double.parseDouble(String.format("%.4f",col3)));
    //                    System.err.println(col3);
                        data.addRow(new Object[]{col1,String.format("%.4f",0.00), col3, String.format("%.4f",(0.000 + col3)) });
                    }

                    Date d1 = new SimpleDateFormat("yyyy-MM-dd").parse(startingDate);
                    Date d2 = new SimpleDateFormat("yyyy-MM-dd").parse(endingDate);
                    long diff = d2.getTime() - d1.getTime();
                    jLabel7.setText(TimeUnit.DAYS.convert(diff, TimeUnit.MILLISECONDS) + " Days");
                    jLabel9.setText(rownum + "");
                    jLabel12.setText(String.format("%.4f",totalValueOfSearch));


                }

            }catch(Exception ex){
                System.out.println("No database connection"+ex);
                NoConnection no = new NoConnection();
                RakibsTraders.popUp(no);
            }

        }
    }//GEN-LAST:event_jButtonGOActionPerformed

    private void jTextFieldSearchProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldSearchProductActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldSearchProductActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        // TODO add your handling code here:
        if((jCheckBox1.isSelected()) ){
            jTextFieldSearchProduct.setEnabled(true);
            jButtonGO1.setEnabled(true);
        }
        else{
            jTextFieldSearchProduct.setEnabled(false);
            jButtonGO1.setEnabled(false);
        }
    }//GEN-LAST:event_jCheckBox1ActionPerformed
    
    DefaultTableModel data = new DefaultTableModel(new String[]{"Date", "Cost", "Expense" , "Total Cost"}, 0);
    
    private void jButtonGO1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGO1ActionPerformed
        // TODO add your handling code here:
        DefaultTableModel data2 = new DefaultTableModel(new String[]{"Date", "Billing ID", "Billing Cost"}, 0);
        JTable table2 = new JTable();
        data.getDataVector().removeAllElements();
        table2.setModel(data2);
        scrPaneTable.getViewport().add(table2);
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");

        if( !jCheckBox2.isSelected() && jTextFieldSearchProduct.getText().startsWith("#") ){
            // Working with only date
            String productID = jTextFieldSearchProduct.getText();
            String startingDate = dateFormat.format(jDateChooser1.getDate());
            Connection con = DBConnectionProvider.getDBConnection();

            String query = "SELECT bill_products.price,bill_list.date,bill_list.billing_ID FROM bill_products INNER "
                    + "JOIN bill_list ON bill_products.billing_ID = bill_list.billing_ID  and  date = ? and bill_products.products_ID = ? "
                    + "order by bill_list.billing_ID asc";

            dates.clear(); values.clear();


            try {
                PreparedStatement pstmt = con.prepareStatement(query);
                pstmt.setString( 1, startingDate );
                pstmt.setString( 2, productID );
                ResultSet rs = pstmt.executeQuery();
                //                System.err.println("Working2");
                Integer rowcount= 0;
                BigDecimal totalForSearch = BigDecimal.ZERO; // Ne sala , kha eibar koto error khaite paros

                while( rs.next() ){
                    rowcount++;
                    String col1 = rs.getString("date");
                    String col2 = productID;
                    String col4 = rs.getString("billing_ID");
                    String col3 = rs.getString("price");
                    dates.add(col1);
                    values.add(Double.parseDouble(col3));
                    data2.addRow(new Object[]{col1,col4, col3 });
                    
                    totalForSearch = totalForSearch.add(new BigDecimal(col3));
                }
                
                table2.setModel(data2);
                rs.close();
                jLabel9.setText(rowcount + "");
                jLabel12.setText(String.format("%.4f",totalForSearch));

            } catch (SQLException ex) {
                Logger.getLogger(SellsReports.class.getName()).log(Level.SEVERE, null, ex);
                NoConnection page = new NoConnection();
                RakibsTraders.popUp(page);
            }
        }
        else{

            String productID = jTextFieldSearchProduct.getText();
            String startingDate = dateFormat.format(jDateChooser1.getDate());
            String endingDate = dateFormat.format(jDateChooser2.getDate());
            Connection con = DBConnectionProvider.getDBConnection();

            String query = "SELECT bill_products.price,bill_list.date,bill_list.billing_ID FROM bill_products INNER JOIN bill_list ON bill_products.billing_ID = bill_list.billing_ID  and  bill_list.date between ? and ? and bill_products.products_ID = ?  order by bill_list.billing_ID asc";
            

            try {
                PreparedStatement pstmt = con.prepareStatement(query);
                pstmt.setString( 3, productID );
                pstmt.setString( 1,startingDate );
                pstmt.setString( 2,endingDate );
                ResultSet rs = pstmt.executeQuery();
                //                System.err.println("Working2");
                Integer rowcount= 0;
                BigDecimal totalForSearch = BigDecimal.ZERO; // Ne sala , kha eibar koto error khaite paros
                dates.clear(); values.clear();


                while( rs.next() ){
                    rowcount++;
                    String col1 = rs.getString("date");
                    String col2 = productID;
                    String col4 = rs.getString("billing_ID");
                    String col3 = rs.getString("price");
                    dates.add(col1);
                    values.add(Double.parseDouble(col3));
                    data2.addRow(new Object[]{col1,col4, col3 });
                    
                    totalForSearch = totalForSearch.add(new BigDecimal(col3));

                }
                table2.setModel(data2);
                rs.close();

                Date d1 = new SimpleDateFormat("yyyy-MM-dd").parse(startingDate);
                Date d2 = new SimpleDateFormat("yyyy-MM-dd").parse(endingDate);
                long diff = d2.getTime() - d1.getTime();
                jLabel7.setText(TimeUnit.DAYS.convert(diff, TimeUnit.MILLISECONDS) + " Days");
                jLabel9.setText(rowcount + "");
                jLabel12.setText(String.format("%.4f",totalForSearch));

            } catch (SQLException ex) {
                Logger.getLogger(SellsReports.class.getName()).log(Level.SEVERE, null, ex);
                NoConnection page = new NoConnection();
                RakibsTraders.popUp(page);
            } catch (ParseException ex) {
                Logger.getLogger(SellsReports.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jButtonGO1ActionPerformed

    private void jButtonRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRefreshActionPerformed
        // TODO add your handling code here:
        data.getDataVector().removeAllElements();
        table.setModel(data);
        scrPaneTable.getViewport().add(table);
        setData();
        jLabel7.setText("#Days");
        jLabel9.setText("#Item");
        jLabel12.setText("#Total Cost");
    }//GEN-LAST:event_jButtonRefreshActionPerformed

    private void jButtonViewStock2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonViewStock2ActionPerformed
        // TODO add your handling code here:
        ViewStock page = new ViewStock();
        page.setCaller(this);
        RakibsTraders.bigPopUp(page);
        this.setEnabled(false);
    }//GEN-LAST:event_jButtonViewStock2ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        CostReportGraph page = new CostReportGraph() {
            @Override
            public void start(Stage primaryStage) throws Exception {
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }
        };
        page.setData(dates,values);
        page.main();

    }//GEN-LAST:event_jButton2ActionPerformed

   
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CostReport().setVisible(true);
            }
        });
    }

    private void initTable(){
        setData();
        scrPaneTable.getViewport().add(table);
    }
    
    public ArrayList<String> datesOfExpense = new ArrayList<String>();
    public ArrayList<Double> valueOfExpense = new ArrayList<Double>();
    
    private void setData(){
        //DefaultTableModel data = new DefaultTableModel(new String[]{"Products ID", "Company Name", "Model", "Dimension", "Pcs per Box", "Item Unit", "Purchase Price", "Selling price"}, 0);
        Connection con = DBConnectionProvider.getDBConnection();
        
        String query = "SELECT date,sum(total) as sumBills from bill_list GROUP by date ORDER by date asc";
        String query4 = "SELECT date,sum(amount) as sumExpense from expenses where date = ? GROUP by date ORDER by date asc";
            
        try{
                PreparedStatement pstmt1 = con.prepareStatement(query);
                ResultSet rs = pstmt1.executeQuery();
                BigDecimal totalValueOfSearch = BigDecimal.ZERO;
                dates.clear(); values.clear();
                Integer rownum = 0;
                
                if( rs.next() ){
                    do{
//                        totalValueOfSearch = BigDecimal.ZERO;
                        rownum++;
                        String col1 = rs.getString("date");
                        Double col2 = rs.getDouble("sumBills");
                        dates.add(col1);
                        
                        PreparedStatement pstmt4 = con.prepareStatement(query4);
                        pstmt4.setString( 1,col1 );
                        ResultSet rs4 = pstmt4.executeQuery();
                        Double col3 = 0.0;
                        
                        if(rs4.next()){
                            do{
                                col3 = rs4.getDouble("sumExpense");
                             }while( rs4.next() );
                        }
                        rs4.close();

                        totalValueOfSearch = totalValueOfSearch.add(new BigDecimal(col3));
                        totalValueOfSearch = totalValueOfSearch.add(new BigDecimal(col2));
                        values.add(Double.parseDouble(String.format("%.4f",col3)));
                        
                        data.addRow(new Object[]{col1,String.format("%.4f",col2), col3, String.format("%.4f",(col2+col3)) });
//                        System.err.println( col1 + " " + col2 + " "  + col3 );
                        
                    }while(rs.next());
                    table.setModel(data);
                    rs.close();
                }
                
                String query3 = "SELECT date, sum(amount) as sumEXP from expenses where date not in (select date from bill_list) GROUP by date" ;
                PreparedStatement pstmt3 = con.prepareStatement(query3);
                ResultSet rs3 = pstmt3.executeQuery();
                String col1 = "";
                Double col3 = 0.0;
//                totalValueOfSearch = BigDecimal.ZERO;
//                    values.clear();dates.clear();

                while( rs3.next() ){
                    rownum++;
                    col1 = rs3.getString("date");
                    col3 = rs3.getDouble("sumEXP");
                    dates.add(col1);
                    totalValueOfSearch = totalValueOfSearch.add(new BigDecimal(col3));
                    values.add(Double.parseDouble(String.format("%.4f",col3)));
//                    System.err.println(col3);
                    data.addRow(new Object[]{col1,String.format("%.4f",0.00), col3, String.format("%.4f",(0.000 + col3)) });
                }

                jLabel9.setText(rownum + "");
                jLabel12.setText(String.format("%.4f",totalValueOfSearch));


            }catch(Exception ex){
                System.out.println("No database connection"+ex);
                NoConnection no = new NoConnection();
                RakibsTraders.popUp(no);
            }
        
            
        
        
    }

    //custom variable
    private JTable table = new JTable();
    private JFrame caller;
    //end of custom variable
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButtonGO;
    private javax.swing.JButton jButtonGO1;
    private javax.swing.JButton jButtonRefresh;
    private javax.swing.JButton jButtonViewStock2;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private com.toedter.calendar.JDateChooser jDateChooser2;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField jTextFieldSearchProduct;
    private javax.swing.JLabel lblBackground;
    private javax.swing.JLabel lblExpenseHistory;
    private javax.swing.JScrollPane scrPaneTable;
    // End of variables declaration//GEN-END:variables
   
    private void setIcon(){
        this.setIconImage(new ImageIcon(getClass().getResource("/Resources/Icons/Icon.png")).getImage());
    }
    
    public void setCaller(JFrame frame){
        this.caller = frame;
    }
    
    @Override
    public void processWindowEvent(WindowEvent e) {
        if (e.getID() == WindowEvent.WINDOW_CLOSING) {
                caller.setEnabled(true);
                dispose();
        }
    }


}
