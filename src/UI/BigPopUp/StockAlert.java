package UI.BigPopUp;

import Database.DBConnectionProvider;
import Others.Functions;
import UI.PopUp.NoConnection;
import UI.Stock;
import com.placeholder.PlaceHolder;
import java.awt.Color;
import java.awt.List;
import java.awt.event.WindowEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Objects;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JTable;
import javax.swing.RowSorter;
import javax.swing.SortOrder;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import rakibs.traders.RakibsTraders;

/**
 * Profit report would be like, 
 * For todays profit report it will be show the profit of every sell today. Parameter( Date, Invoice ID, Selling Amount, Profit amount)
 * For Month profit report it will show the profit of every day sell. Parameter( date, profit amount )
 * Same goes for 3 months,6 months and for year. Relation would be months to days, 3 months to months,years to months.
 *
 * 
 * 
 * 
 */
public class StockAlert extends javax.swing.JFrame {
    /**
     * Creates new form ProductsTable
     */
    
    
    public StockAlert() {
        initComponents();
        initTable();
        setIcon();
        initComboProductID();
        place = new PlaceHolder(jTextFieldSearchProduct,"Search Product");
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        jTextFieldSearchProduct = new javax.swing.JTextField();
        lblExpenseHistory1 = new javax.swing.JLabel();
        scrPaneStock = new javax.swing.JScrollPane();
        lblExpenseHistory2 = new javax.swing.JLabel();
        lblTopSoldsItems = new javax.swing.JLabel();
        jButtonGO = new javax.swing.JButton();
        jScrollPaneTopSold = new javax.swing.JScrollPane();
        jButtonRefresh = new javax.swing.JButton();
        lblBackground = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel3.setBackground(new java.awt.Color(204, 204, 204));
        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(204, 204, 204));
        jLabel3.setText("Search Product");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 70, 110, 50));

        jTextFieldSearchProduct.setForeground(new java.awt.Color(153, 153, 153));
        jTextFieldSearchProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldSearchProductActionPerformed(evt);
            }
        });
        getContentPane().add(jTextFieldSearchProduct, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 80, 180, 30));

        lblExpenseHistory1.setFont(new java.awt.Font("Titillium", 0, 18)); // NOI18N
        lblExpenseHistory1.setForeground(new java.awt.Color(67, 196, 114));
        lblExpenseHistory1.setText("Products with alert value");
        getContentPane().add(lblExpenseHistory1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 120, 304, 43));
        getContentPane().add(scrPaneStock, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 170, 630, 330));

        lblExpenseHistory2.setFont(new java.awt.Font("Titillium", 0, 22)); // NOI18N
        lblExpenseHistory2.setForeground(new java.awt.Color(67, 196, 114));
        lblExpenseHistory2.setText("Stock Alert");
        getContentPane().add(lblExpenseHistory2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 30, 304, 43));

        lblTopSoldsItems.setFont(new java.awt.Font("Titillium", 0, 18)); // NOI18N
        lblTopSoldsItems.setForeground(new java.awt.Color(67, 196, 114));
        lblTopSoldsItems.setText("TOP  Sold Items");
        getContentPane().add(lblTopSoldsItems, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 120, 304, 43));

        jButtonGO.setBackground(new java.awt.Color(0, 0, 153));
        jButtonGO.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jButtonGO.setForeground(new java.awt.Color(255, 255, 255));
        jButtonGO.setText("GO");
        jButtonGO.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGOActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonGO, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 80, 60, 30));
        getContentPane().add(jScrollPaneTopSold, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 170, 390, 330));

        jButtonRefresh.setBackground(new java.awt.Color(0, 0, 153));
        jButtonRefresh.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButtonRefresh.setForeground(new java.awt.Color(255, 255, 255));
        jButtonRefresh.setText("REFRESH");
        jButtonRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRefreshActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonRefresh, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 80, 110, 30));

        lblBackground.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Resources/Icons/background.png"))); // NOI18N
        getContentPane().add(lblBackground, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -360, 2540, 1380));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextFieldSearchProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldSearchProductActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_jTextFieldSearchProductActionPerformed

    private void jButtonGOActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGOActionPerformed
        // TODO add your handling code here:
        DefaultTableModel data = new DefaultTableModel(new String[]{"SL", "Products ID", "Company Name", "Model", "Dimension", "Item Unit", "Available"}, 0);
        Connection con = DBConnectionProvider.getDBConnection();
        String query= "SELECT * FROM `stock` WHERE `stock`.`products_id` = ?";
        String query2 = "SELECT * FROM `products` WHERE `products`.`products_id` = ?";
        String productID = jTextFieldSearchProduct.getText(); 
        int rownum = 0;
        try{
            PreparedStatement pstmt1 = con.prepareStatement(query);
            PreparedStatement pstmt2 = con.prepareStatement(query2);
            pstmt1.setString(1,productID);
            pstmt2.setString(1,productID);
            ResultSet rs1= pstmt1.executeQuery();
            ResultSet rs2= pstmt2.executeQuery();
            
            if(rs1.next() && rs2.next()){
                do{
                    rownum++;
                    String col5 = Double.toString(rs1.getDouble("left"));
                    
                    String col2 = rs2.getString("company_name");
                    String col3 = rs2.getString("model");
                    String col4 = rs2.getString("dimension");
                    String col6 = rs2.getString("item_unit");
                    
                    data.addRow(new Object[]{rownum,productID, col2, col3, col4,col6,col5});
                    
                    
                }while(rs1.next() && rs2.next());
                table.setModel(data);
                rs1.close();
                rs2.close();
            }

        }catch(Exception ex){
            System.out.println("No database connection"+ex);
            NoConnection no = new NoConnection();
            RakibsTraders.popUp(no);
        }
    }//GEN-LAST:event_jButtonGOActionPerformed

    
    private void jButtonRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRefreshActionPerformed
        // TODO add your handling code here:
        data.getDataVector().removeAllElements();
        table.setModel(data);
        scrPaneStock.getViewport().add(table);
        setData();
    }//GEN-LAST:event_jButtonRefreshActionPerformed

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StockAlert.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StockAlert.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StockAlert.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StockAlert.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new StockAlert().setVisible(true);
            }
        });
    }

    private void initTable(){
        setData();
        
        // will try to add red to the first 5 rows
        /*for(int i=0; i<5; i++){
            table.setRowColour(1, Color.YELLOW);
        }*/
        scrPaneStock.getViewport().add(table);
    }
    
    private void setData(){
        
        Connection con = DBConnectionProvider.getDBConnection();
        String query= "SELECT * FROM `stock` where `stock`.`left` <= `stock`.`alert_val` ORDER BY `stock`.`left` ASC";
        String query2 = "SELECT * FROM `products` WHERE `products`.`products_id` = ?";
        int rownum = 0;
        try{
            Statement stmt = con.createStatement();
            PreparedStatement pstmt = con.prepareStatement(query2);
            ResultSet rs= stmt.executeQuery(query);
            if(rs.next()){
                do{
                    rownum++;
                    String col1 = rs.getString("products_id");
                    pstmt.setString(1,col1);
                    ResultSet rs2= pstmt.executeQuery();
                    String col5 = Double.toString(rs.getDouble("left"));
                    while(rs2.next()){
                        String col2 = rs2.getString("company_name");
                        String col3 = rs2.getString("model");
                        String col4 = rs2.getString("dimension");
                        String col6 = rs2.getString("item_unit");
                        data.addRow(new Object[]{rownum,col1, col2, col3, col4, col6, col5});
                    }
                    
                }while(rs.next());
                table.setModel(data);
                rs.close();
            }

        }catch(Exception ex){
            System.out.println("No database connection"+ex);
            NoConnection no = new NoConnection();
            RakibsTraders.popUp(no);
        }
        
        new Thread(){
            public void run(){
                ArrayList<String> productID = new ArrayList<>();
                ArrayList<Integer> sold = new ArrayList<>();
                DefaultTableModel data = new DefaultTableModel(new String[]{"SL","Products ID", "Model", "Total Sold (Times)"}, 0);
                Connection con = DBConnectionProvider.getDBConnection();
                String query= "select * from products";
                String query2 = "select count(product_ID) as rowcount from invoice_products where product_ID = ?";
                int rownum = 0;
                try{
                    Statement stmt = con.createStatement();
                    PreparedStatement pstmt = con.prepareStatement(query2);
                    ResultSet rs= stmt.executeQuery(query);
                    if(rs.next()){
                        do{
                            //rownum++;
                            String id = rs.getString("products_id");
                            String name = rs.getString("model");
                            pstmt.setString(1,id);
                            ResultSet rs2= pstmt.executeQuery();
                            Integer soldList =0;
                            while(rs2.next()){
                                soldList = rs2.getInt("rowcount");
                            }
                            p_id.add(id);
                            p_name.add(name);
                            p_sold.add(soldList);
                        }while(rs.next());
                        
                        
                        quickSort(0, (p_sold.size()-1));
                        System.out.println("size: "+p_id.size());
                        for(int i=0; i<p_id.size(); i++){
                            rownum++;
                            data.addRow(new Object[]{rownum,p_id.get(i), p_name.get(i), p_sold.get(i)});
                            System.out.println(""+rownum);
                        }
                         
                        soldTable.setModel(data);
                        jScrollPaneTopSold.getViewport().add(soldTable);
                        rs.close();
                    }

                }catch(Exception ex){
                    System.out.println("No database connection"+ex);
                    NoConnection no = new NoConnection();
                    RakibsTraders.popUp(no);
                }
            }
        }.start();
    }

    //custom variable
    private JTable table = new JTable();
    private JTable soldTable = new JTable();
    private PlaceHolder place;
    private ArrayList<String> productID = new ArrayList<>();
    private ArrayList<String> p_id = new ArrayList<>();
    private ArrayList<String> p_name = new ArrayList<>();
    private ArrayList<Integer> p_sold = new ArrayList<>();
    private DefaultTableModel data = new DefaultTableModel(new String[]{"SL", "Products ID", "Company Name", "Model", "Dimension", "Item Unit", "Available"}, 0);
    //end of custom variable
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonGO;
    private javax.swing.JButton jButtonRefresh;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPaneTopSold;
    private javax.swing.JTextField jTextFieldSearchProduct;
    private javax.swing.JLabel lblBackground;
    private javax.swing.JLabel lblExpenseHistory1;
    private javax.swing.JLabel lblExpenseHistory2;
    private javax.swing.JLabel lblTopSoldsItems;
    private javax.swing.JScrollPane scrPaneStock;
    // End of variables declaration//GEN-END:variables
   
    //custom variable
    private JFrame caller;
    //end of custom variable
    
    private void setIcon(){
        this.setIconImage(new ImageIcon(getClass().getResource("/Resources/Icons/Icon.png")).getImage());
    }

    private void initComboProductID(){
        productID = Functions.productID();
        Functions.setupAutoComplete(jTextFieldSearchProduct, productID); 
    }
    
    private void quickSort(int low, int high){
        if (low < high)
        {
            /* pi is partitioning index, arr[pi] is 
              now at right place */
            int pi = partition( low, high);
 
            // Recursively sort elements before
            // partition and after partition
            quickSort( low, pi-1);
            quickSort( pi+1, high);
        }
    
    }
    
    private int partition( int low, int high)
    {
        Integer pivot = p_sold.get(high); 
        int i = (low-1); // index of smaller element
        for (int j=low; j<high; j++)
        {
            // If current element is smaller than or
            // equal to pivot
            if (p_sold.get(j) >= pivot)
            {
                i++;
 
                // swap arr[i] and arr[j]
                //arr[i] = arr[j];
                //arr[j] = temp;
                int temp = p_sold.get(i);
                //p_sold.remove(i);
                p_sold.set(i,p_sold.get(j));
                //p_sold.remove(j);
                p_sold.set(j,temp);
                
                String temp_id = p_id.get(i);
                p_id.set(i,p_id.get(j));
                p_id.set(j,temp_id);
                
                String temp_name = p_name.get(i);
                p_name.set(i,p_name.get(j));
                p_name.set(j,temp_name);
            }
        }
 
        // swap arr[i+1] and arr[high] (or pivot)
        //int temp = arr[i+1];
        //arr[i+1] = arr[high];
        //arr[high] = temp;
 
        int temp = p_sold.get(i+1);
        //p_sold.remove(i+1);
        p_sold.set(i+1,p_sold.get(high)); 
        //p_sold.remove(high);
        p_sold.set(high,temp);

        String temp_id = p_id.get(i+1);
        p_id.set(i+1,p_id.get(high));
        p_id.set(high,temp_id);

        String temp_name = p_name.get(i+1);
        p_name.set(i+1,p_name.get(high));
        p_name.set(high,temp_name);
        
        return i+1;
    }
    
    @Override
    public void processWindowEvent(WindowEvent e) {
        if (e.getID() == WindowEvent.WINDOW_CLOSING) {
            caller.setEnabled(true);
            dispose();
        }
    }
    
    
    public void setCaller(JFrame frame){
        this.caller = frame;
    }
}
